//
//  TermSearchViewController.swift
//  newsApp
//
//  Created by jay on 7/29/25.
//  Copyright ¬© 2025 hkcom. All rights reserved.
//

import UIKit
import RxSwift
import RxCocoa

class TermSearchViewController: UIViewController, SearchContentViewController {
    var pageIndex: Int = 4

    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var noDataView: UIView!
    @IBOutlet weak var pleasePutView: UIView!
    private let refreshControl = UIRefreshControl()
    
    // MARK: - Properties
    private let viewModel = TermSearchViewModel()
    private let disposeBag = DisposeBag()
    private var currentSearchQuery: String = ""
    
    // Îâ¥Ïä§ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Îç∏Î¶¨Í≤åÏù¥Ìä∏
    weak var webNavigationDelegate: WebNavigationDelegate?
    
    // Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ Ï∂îÍ∞Ä
    private let loadingIndicator = UIActivityIndicatorView(style: .large)
    
    // MARK: - View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupTableView()
        setupLoadingIndicator()
        bindViewModel()
        pleasePutView.isHidden = !currentSearchQuery.isEmpty
    }
    
    private func setupLoadingIndicator() {
        // Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÏÑ§Ï†ï
        loadingIndicator.hidesWhenStopped = true
        loadingIndicator.color = .systemGray
        
        // Î∑∞Ïóê Ï∂îÍ∞Ä
        view.addSubview(loadingIndicator)
        loadingIndicator.translatesAutoresizingMaskIntoConstraints = false
        
        // Ï§ëÏïôÏóê ÏúÑÏπò
        NSLayoutConstraint.activate([
            loadingIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            loadingIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -73)
        ])
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self

        tableView.refreshControl = refreshControl
        
        // Î¶¨ÌîÑÎ†àÏãú Ïª®Ìä∏Î°§
        refreshControl.addTarget(self, action: #selector(refresh), for: .valueChanged)
    }
    
    private func bindViewModel() {
        // ÏïÑÏù¥ÌÖú Î¶¨Ïä§Ìä∏ Î∞îÏù∏Îî©
        Observable.combineLatest(
              viewModel.items,
              viewModel.isLoadingRelay
          )
          .skip(1)
          .observe(on: MainScheduler.instance)
          .subscribe(onNext: { [weak self] items, isLoading in
              self?.tableView.reloadData()
              self?.refreshControl.endRefreshing()
              
              // Î°úÎî© Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå noDataView ÌëúÏãú/Ïà®ÍπÄ Í≤∞Ï†ï
              if !isLoading {
                  let shouldShowNoData = items.isEmpty && !(self?.currentSearchQuery.isEmpty ?? true)
                  self?.noDataView.isHidden = !shouldShowNoData
                  self?.loadingIndicator.stopAnimating()
                  self?.pleasePutView.isHidden = true
              } else {
                  // Î°úÎî© Ï§ëÏùº ÎïåÎäî noDataView Ïà®ÍπÄ
                  self?.noDataView.isHidden = true
                  self?.loadingIndicator.startAnimating()
              }
              
              print("üì∞ UI ÏóÖÎç∞Ïù¥Ìä∏: \(items.count)Í∞ú ÏïÑÏù¥ÌÖú, Î°úÎî©Ï§ë: \(isLoading)")
          })
          .disposed(by: disposeBag)
        
        // ÏóêÎü¨ Î∞îÏù∏Îî©
        viewModel.errorRelay
            .observe(on: MainScheduler.instance)
            .subscribe(onNext: { [weak self] error in
                self?.loadingIndicator.stopAnimating()
                self?.showAlert(message: error)
                self?.refreshControl.endRefreshing()
            })
            .disposed(by: disposeBag)
    }
    
    // MARK: - Actions
    @objc private func refresh() {
        viewModel.refresh()
    }
    
    // MARK: - SearchContentViewController Protocol
    func performSearch(with query: String) {
        currentSearchQuery = query
        print("üì∞ SearchLatestNewsViewController Í≤ÄÏÉâ: '\(query)'")
        if !query.isEmpty {
            self.pleasePutView.isHidden = true
        } else if query.isEmpty {
            self.pleasePutView.isHidden = false
            return
        }
        viewModel.performSearch(query: query)
    }
    
    // MARK: - Helper Methods
    private func showAlert(message: String) {
        let alert = UIAlertController(title: "ÏïåÎ¶º", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default))
        present(alert, animated: true)
    }
    
    private func openNewsDetail(searchResult: TermItem) {
        guard let url = URL(string: searchResult.url ?? "") else {
            print("üì∞ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ URL: \(String(describing: searchResult.url))")
            return
        }
        
        guard let termDetailVC = UIStoryboard(name: "TermDetail", bundle: nil).instantiateViewController(withIdentifier: "TermDetailViewController") as? TermDetailViewController else {
            return
        }
        
        termDetailVC.seq = searchResult.seq ?? 0
        
        self.navigationController?.pushViewController(termDetailVC, animated: true)
    }
}

// MARK: - TableView DataSource & Delegate
extension TermSearchViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.itemCount
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let searchResult = viewModel.item(at: indexPath.row) else {
            return UITableViewCell()
        }
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "TermSearchTableViewCell", for: indexPath) as! TermSearchTableViewCell
        cell.configure(with: searchResult)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        guard let searchResult = viewModel.item(at: indexPath.row) else { return }
        openNewsDetail(searchResult: searchResult)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // Î¨¥ÌïúÏä§ÌÅ¨Î°§ Ï≤¥ÌÅ¨
        if viewModel.shouldLoadMore(at: indexPath.row) {
            viewModel.loadNextPage()
        }
    }
}
